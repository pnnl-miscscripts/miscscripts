name: Build
on:
  schedule:
    - cron: '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
      - name: Build curl-jq container
        run: ./containers/build curl-jq
      - name: Build gitlab-runner-operator container
        run: ./containers/build gitlab-runner-operator
      - name: Build tenant-namespace-operator container
        run: ./containers/build tenant-namespace-operator
      - name: Build py2lint container
        run: ./containers/build py2lint
      - name: Build pixiecore container
        run: ./containers/build pixiecore
      - name: Build ipmitool container
        run: ./containers/build ipmitool
      - name: Build ipmi-exporter container
        run: ./containers/build ipmi-exporter
      - name: Build dhcpd container
        run: ./containers/build dhcpd
      - name: Build inotify-tools container
        run: ./containers/build inotify-tools
      - name: Build chronyd container
        run: ./containers/build chronyd
      - name: Build debug-toolbox container
        run: ./containers/build debug-toolbox
      - name: Build smartctl-exporter container
        run: ./containers/build smartctl-exporter
      - name: Setup rpm signing
        run: |
          printf "%s" "$RPM_SIGNING_KEY" > rpm.priv
          printf "%s" "$RPM_SIGNING_PUB" > rpm.pub
#      - name: Setup rpm signing
#        run: |
#          openssl aes-256-cbc -K $encrypted_94b98ec18b77_key -iv $encrypted_94b98ec18b77_iv -in rpm.priv.enc -out rpm.priv -d
      - name: Build rpms-containerd container
        run: ./containers/build rpms-containerd
#      - stage: build
#        before_install: &upgradedocker
#        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#        - sudo apt-get update
#        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
#        - openssl aes-256-cbc -K $encrypted_94b98ec18b77_key -iv $encrypted_94b98ec18b77_iv -in rpm.priv.enc -out rpm.priv -d
#        dist: xenial
#        language: shell
#        name: Build rpms-containerd container
#        script: ./containers/build rpms-containerd
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-node-base container
#        script: ./containers/build rpms-node-base
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-openvswitch container
#        script: ./containers/build rpms-openvswitch
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-kubernetes container 1.16
#        script: ./containers/build rpms-kubernetes 1.16
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-kubernetes container 1.17
#        script: ./containers/build rpms-kubernetes 1.17
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-kubernetes container 1.18
#        script: ./containers/build rpms-kubernetes 1.18
#      - stage: build
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build rpms-kubernetes container 1.15
#        script: ./containers/build rpms-kubernetes 1.15
#      - stage: build
#        dist: xenial
#        language: shell
#        name: Build anaconda container
#        script: ./containers/build anaconda

#      - stage: build-full-image
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build full k8s node image 1.16
#        script: ./containers/build k8s-node-image 1.16
#      - stage: build-full-image
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build full k8s node image 1.17
#        script: ./containers/build k8s-node-image 1.17
#      - stage: build-full-image
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build full k8s node image 1.18
#        script: ./containers/build k8s-node-image 1.18
#      - stage: build-full-image
#        before_install: *upgradedocker
#        dist: xenial
#        language: shell
#        name: Build full k8s node image 1.15
#        script: ./containers/build k8s-node-image 1.15

#      - stage: build-nginx
#        dist: xenial
#        language: shell
#        name: Build anaconda+nginx container
#        script: ./containers/build anaconda-nginx
#      - stage: build-nginx
#        dist: xenial
#        language: shell
#        name: Build k8s-node-image+nginx container 1.16
#        script: ./containers/build k8s-node-image-nginx 1.16
#      - stage: build-nginx
#        dist: xenial
#        language: shell
#        name: Build k8s-node-image+nginx container 1.17
#        script: ./containers/build k8s-node-image-nginx 1.17
#      - stage: build-nginx
#        dist: xenial
#        language: shell
#        name: Build k8s-node-image+nginx container 1.18
#        script: ./containers/build k8s-node-image-nginx 1.18
#      - stage: build-nginx
#        dist: xenial
#        language: shell
#        name: Build k8s-node-image+nginx container 1.15
#        script: ./containers/build k8s-node-image-nginx 1.15

#      - stage: build-image-library-charts
#        dist: xenial
#        language: shell
#        name: Build image library charts
#        script: ./charts/image-library-charts/buildall

#      - stage: build-charts
#        dist: xenial
#        language: shell
#        name: Build charts
#        script: ./charts/charts/buildall
